import React, { useEffect, useState } from "react";
import { API, graphqlOperation } from "@aws-amplify/api";
import { Amplify } from "aws-amplify";
import awsExports from "../aws-exports"; // adjust path if necessary
import { listQuestions } from "../graphql/queries"; // auto-generated by Amplify

Amplify.configure(awsExports);

interface Question {
  id: string;
  question: string;
  choices: string[];
  answer: string;
  explanation?: string;
  topic?: string;
}

const Questions: React.FC = () => {
  const [questions, setQuestions] = useState<Question[]>([]);
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  const fetchQuestions = async () => {
    setLoading(true);
    setError(null);
    try {
      const result: any = await API.graphql(graphqlOperation(listQuestions, { limit: 500 }));
      if (result.data && result.data.listQuestions) {
        setQuestions(result.data.listQuestions.items || []);
      } else {
        setQuestions([]);
      }
    } catch (err: any) {
      console.error("Error fetching questions:", err);
      setError(err.message || "Error fetching questions");
    }
    setLoading(false);
  };

  useEffect(() => {
    fetchQuestions();
  }, []);

  if (loading) return <div>Loading questions...</div>;
  if (error) return <div>Error: {error}</div>;
  if (questions.length === 0) return <div>No questions found.</div>;

  return (
    <div>
      <h2>Questions</h2>
      {questions.map((q) => (
        <div key={q.id} style={{ border: "1px solid #ccc", margin: "8px", padding: "8px" }}>
          <p><strong>Question:</strong> {q.question}</p>
          <p><strong>Choices:</strong> {q.choices.join(", ")}</p>
          <p><strong>Answer:</strong> {q.answer}</p>
          {q.explanation && <p><strong>Explanation:</strong> {q.explanation}</p>}
          {q.topic && <p><strong>Topic:</strong> {q.topic}</p>}
        </div>
      ))}
    </div>
  );
};

export default Questions;
